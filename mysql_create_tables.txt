CREATE DATABASE ww;

USE ww;

CREATE TABLE users (
  userID INT PRIMARY KEY NOT NULL,
  userName VARCHAR(20) NOT NULL,
  userPassword VARCHAR(61) NOT NULL,
  userSex CHAR(1) NOT NULL,
  urDate DATE NOT NULL,
  userPhone VARCHAR(11) NOT NULL,
  userState BOOL NOT NULL,
  userLevel INT NOT NULL,
  userBDate DATE NOT NULL
);

CREATE TABLE friends(
 UserID INT NOT NULL,
 FriendID INT NOT NULL,
 STATE BOOL NOT NULL,
 HaveUnread BOOL,
 FOREIGN KEY (UserID) REFERENCES users(UserID),
 FOREIGN KEY (UserID) REFERENCES users(UserID),
 PRIMARY KEY (UserID,FriendID)
);

CREATE TABLE topics (
  TopicID INT PRIMARY KEY,
  UserID INT NOT NULL,
  TopicCommentNum INT NOT NULL,
  TopicLaunchTime DATETIME NOT NULL,
  TopicContent VARCHAR(200) NOT NULL,
  LikeNum INT NOT NULL,
  FOREIGN KEY (UserID) REFERENCES users(UserID)
);

CREATE TABLE topic_replies (
  TopicID INT NOT NULL,
  CommentUserID INT NOT NULL,
  CommentContent VARCHAR(50) NOT NULL,
  CommentID INT NOT NULL,
  CommentTime DATETIME NOT NULL,
  PRIMARY KEY (TopicID, CommentID),
  FOREIGN KEY (TopicID) REFERENCES topics(TopicID) ON DELETE CASCADE,
  FOREIGN KEY (CommentUserID) REFERENCES users(UserID)
);

CREATE TABLE likes(
 TopicID INT NOT NULL,
 LikeUserID INT NOT NULL,
 PRIMARY KEY (TopicID, LikeUserID),
 FOREIGN KEY (TopicID) REFERENCES topics(TopicID) ON DELETE CASCADE,
 FOREIGN KEY (LikeUserID) REFERENCES users(UserID)
);

CREATE TABLE crowds (
  GroupID INT NOT NULL,
  MasterID INT NOT NULL,
  ManagerID INT NOT NULL,
  GroupName VARCHAR(10) NOT NULL,
  CreateDate DATE NOT NULL,
  GroupNum INT NOT NULL,
  GroupBackground VARCHAR(50),
  PRIMARY KEY (GroupID)
);

CREATE TABLE crowds_members(
 GroupID INT NOT NULL,
 MemberID INT NOT NULL,
 STATE BOOL NOT NULL,
 PRIMARY KEY (GroupID, MemberID),
 FOREIGN KEY (GroupID) REFERENCES crowds(GroupID) ON DELETE CASCADE,
 FOREIGN KEY (MemberID) REFERENCES users(userID)
);

CREATE TABLE crowds_messages (
  GroupID INT NOT NULL,
  GroupMessageID INT NOT NULL,
  ConversationContent VARCHAR(50) NOT NULL,
  UserID INT NOT NULL,
  SendTime DATETIME NOT NULL,
  PRIMARY KEY (GroupID, GroupMessageID),
  FOREIGN KEY (GroupID) REFERENCES crowds(GroupID) ON DELETE CASCADE,
  FOREIGN KEY (UserID) REFERENCES users(UserID)
);

CREATE TABLE private_messages (
  UserID INT NOT NULL,
  ReceiverID INT NOT NULL,
  MessageContent VARCHAR(50) NOT NULL,
  MessageContentID INT NOT NULL,
  SendTime DATETIME NOT NULL,
  ReceiveState BOOL NOT NULL,
  PRIMARY KEY (UserID, ReceiverID, MessageContentID),
  FOREIGN KEY (UserID) REFERENCES users(UserID),
  FOREIGN KEY (ReceiverID) REFERENCES users(UserID)
);

CREATE TABLE supervisors (
  SupervisorID INT NOT NULL,
  GrantTime DATE NOT NULL,
  PRIMARY KEY (SupervisorID),
  FOREIGN KEY (SupervisorID) REFERENCES users(UserID)
);

CREATE TABLE notifications (
  NotificationID INT NOT NULL,
  NotificationContent VARCHAR(100) NOT NULL,
  NotificationTime DATETIME NOT NULL,
  SupervisorID INT NOT NULL,
  PRIMARY KEY (NotificationID),
  FOREIGN KEY (SupervisorID) REFERENCES supervisors(SupervisorID)
);


CREATE TABLE audit_logs (
  LogID INT PRIMARY KEY AUTO_INCREMENT,
  Table_Name VARCHAR(50) NOT NULL,
  Action VARCHAR(10) NOT NULL,
  Action_Time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



DELIMITER $$
CREATE TRIGGER users_trigger
AFTER INSERT ON users
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('users', 'insert', NOW());
END$$

CREATE TRIGGER friends_trigger
AFTER INSERT ON friends
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('friends', 'insert', NOW());
END$$

CREATE TRIGGER topics_trigger
AFTER INSERT ON topics
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('topics', 'insert', NOW());
END;$$


CREATE TRIGGER topic_replies_trigger
AFTER INSERT ON topic_replies
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('topic_replies', 'insert', NOW());
    UPDATE topics SET TopicCommentNum = TopicCommentNum + 1 WHERE TopicID = NEW.TopicID;
END;$$

CREATE TRIGGER crowds_trigger
AFTER INSERT ON crowds
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('crowds', 'insert', NOW());
END;$$

CREATE TRIGGER update_out_group_num
AFTER DELETE ON crowds_members
FOR EACH ROW
BEGIN
    UPDATE crowds
    SET GroupNum = GroupNum - 1
    WHERE GroupID = OLD.GroupID;
END;$$

CREATE TRIGGER update_in_group_num
AFTER UPDATE ON crowds_members
FOR EACH ROW
BEGIN
    IF NEW.STATE = true AND OLD.STATE = false THEN
        UPDATE crowds
        SET GroupNum = GroupNum + 1
        WHERE GroupID = NEW.GroupID;
    END IF;
END;$$

CREATE TRIGGER crowds_messages_trigger
AFTER INSERT ON crowds_messages
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('crowds_messages', 'insert', NOW());
END;$$

CREATE TRIGGER private_messages_trigger
AFTER INSERT ON private_messages
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('private_messages', 'insert', NOW());
END;$$

CREATE TRIGGER supervisors_trigger
AFTER INSERT ON supervisors
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('supervisors', 'insert', NOW());
END;$$

CREATE TRIGGER notifications_trigger
AFTER INSERT ON notifications
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('notifications', 'insert', NOW());
END;$$




DELIMITER ;

CREATE TABLE SPRING_SESSION (
  PRIMARY_ID CHAR(36) NOT NULL,
  SESSION_ID CHAR(36) NOT NULL,
  CREATION_TIME BIGINT NOT NULL,
  LAST_ACCESS_TIME BIGINT NOT NULL,
  MAX_INACTIVE_INTERVAL INT NOT NULL,
  EXPIRY_TIME BIGINT NOT NULL,
  PRINCIPAL_NAME VARCHAR(100),
  CONSTRAINT SPRING_SESSION_PK PRIMARY KEY (PRIMARY_ID)
) ENGINE=INNODB ROW_FORMAT=DYNAMIC;

CREATE UNIQUE INDEX SPRING_SESSION_IX1 ON SPRING_SESSION (SESSION_ID);
CREATE INDEX SPRING_SESSION_IX2 ON SPRING_SESSION (EXPIRY_TIME);
CREATE INDEX SPRING_SESSION_IX3 ON SPRING_SESSION (PRINCIPAL_NAME);

CREATE TABLE SPRING_SESSION_ATTRIBUTES (
  SESSION_PRIMARY_ID CHAR(36) NOT NULL,
  ATTRIBUTE_NAME VARCHAR(200) NOT NULL,
  ATTRIBUTE_BYTES BLOB NOT NULL,
  CONSTRAINT SPRING_SESSION_ATTRIBUTES_PK PRIMARY KEY (SESSION_PRIMARY_ID, ATTRIBUTE_NAME),
  CONSTRAINT SPRING_SESSION_ATTRIBUTES_FK FOREIGN KEY (SESSION_PRIMARY_ID) REFERENCES SPRING_SESSION (PRIMARY_ID) ON DELETE CASCADE
) ENGINE=INNODB ROW_FORMAT=DYNAMIC;


insert into users values(0,"fun",123456,'m',CURDATE(),18114803454,false,0,CURDATE());
insert into supervisors values(0,CURDATE());
insert into notifications values (0,"欢迎来到低语世界",CURDATE(),0);
insert into topics values(0,0,0,curdate(),"欢迎来到低语世界",0);
insert into crowds values(0,0,0,"低语世界",curdate(),1,"低语世界专用群");


CREATE TABLE novels (
    id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(100) NOT NULL,
    picture VARCHAR(20) NOT NULL,
    author VARCHAR(50),
    description VARCHAR(511),
    chapter INT NOT NULL
);

CREATE TABLE bookmarks (
    userID INT,
    id INT PRIMARY KEY AUTO_INCREMENT,
    novel_id INT,
    page_number INT,
    chapter INT,
    FOREIGN KEY (novel_id) REFERENCES novels(id),
    FOREIGN KEY (userID) REFERENCES users(userID)
);

DELIMITER $$
insert into novels(title,picture,author,description,chapter) values
("重生之我是大学牲","重生之我是大学牲.png","佚名","  或许是出于刚毕业就失业的我，亦或是对过去大学生活不满的我，想重新体验大学生活的我，想挑战这个困难模式的我，还没读到大学就想先好好享受大学生活的我，想重新(也许是尝试)体验大学生的生活的我……无论出于何种理由，突然有一个奇怪的声音出现在了脑海里，祂说到“可以给予你实现愿望的机会，但是，出于对这个世界的保护，对你自身的保护，你将会忘记现在所有的一切，并且是随机的以一个初入大学的新生，在校园里生活，闯荡，走出自己的路吧。”“我毫无实感，但我想要这个机会”。脑海里刚对自己说完这句话，突然，困意席卷而来，我回到过去了。",3);

insert into novels(title,picture,author,description,chapter) values
("《三体1·地球往事》","三体1.jpg",'刘慈欣','文化大革命如火如荼地进行，天文学家叶文洁在其间历经劫难，被带到军方绝秘计划:红岸工程。叶文洁以太阳为天线，向宇宙发出地球文明的第一声啼鸣，取得了探寻外星文明的突破性进展。三颗无规则运行的太阳主导下，四光年外的“三体文明”百余次毁灭与重生，正被逼迫不得不逃离母星，而恰在此时，他们接收到了地球发来的信息。对人性绝望的叶文洁向三体人暴露了地球的坐标，彻底改变了人类的命运。
地球的基础科学出现了异常的扰动，纳米科学家汪淼进入神秘的网络游戏《三体》，开始逐步逼近这个世界的真相。汪淼参加一次玩家聚会时，接触到了地球上应对三体人到来而形成的一个秘密组织（ETO）。地球防卫组织中国区作战中心通过“古筝计划”，一定程度上挫败了拯救派和降临派扰乱人类科学界和其他领域思想的图谋，获悉处于困境之中的三体人为了得到一个能够稳定生存的世界决定入侵地球。
在运用超技术锁死地球人的基础科学之后，庞大的三体舰队开始向地球进发，人类的末日悄然来临。',39);

insert into novels(title,picture,author,description,chapter) values
("《三体2·黑暗森林》","三体2.jpg",'刘慈欣','三体人在利用科技锁死了地球人的科学之后，出动庞大的宇宙舰队直扑太阳系，面对地球文明前所未有的危局，人类组建起同样庞大的太空舰队，同时行星防御理事会（PDC）利用三体人思维透明的致命缺陷，制定了“面壁计划”。出乎意料地，社会学教授罗辑被选出作为四位“面壁者”之一，展开对三体人的秘密反击。虽然三体人自身无法识破人类的计谋，却依靠由地球人中的背叛者挑选出的“破壁人”与“面壁者”进行智慧博弈。
在这场你死我活的文明生存竞争中，罗辑由一开始的逃避和享乐主义逐渐意识到自己的责任，想到了一个对抗三体文明入侵的办法。科研军官章北海试图借一场陨石雨干涉飞船推进形式的研究方向。近二百年后，获选增援未来的他在人类舰队被“水滴”清除殆尽前，成功抢夺战舰逃离。此时罗辑证实了宇宙文明间的黑暗森林法则，任何暴露自己位置的文明都将很快被消灭。
借助于这一发现，他以向全宇宙公布三体世界的位置坐标相威胁，暂时制止了三体对太阳系的入侵，使地球与三体建立起脆弱的战略平衡。',70);

insert into novels(title,picture,author,description,chapter) values
("《追风筝的人》","追风筝的人.jpg","Khaled Hosseini",'小说以第一人称的角度讲述了阿米尔的故事。阿米尔生于1963年喀布尔的一个富人社区中的一个富裕家庭。其父亲是一个正直的普什图人，一名法官的儿子和成功的地毯商人。阿米尔家的仆人阿里的儿子哈桑则是哈扎拉人。阿米尔和哈桑是好玩伴，哈桑是一个特别忠实，正直，一心只为阿米尔少爷着想的人，两个人经常一起玩耍、游戏。阿米尔是出色的“风筝斗士”，即善于用自己的风筝切断别人的风筝的线；哈桑也是杰出的“风筝追逐者”，因为阿富汗的传统是线被切断而落下的风筝归追到它的人所有。爸爸对两个孩子都很喜爱，但嫌阿米尔过于怯懦。两个孩子和人打架时总是哈桑出头。阿米尔展露出写作的才华，但爸爸并不看重。爸爸的朋友拉辛汗成了阿米尔的忘年知己。1973年穆罕默德·达乌德·汗等发动政变，在阿富汗推翻帝制建立共和国。'
,43);

insert into novels(title,picture,author,description,chapter) values
("秘密花园","秘密花园.jpg","Frances Hodgson Burnett","故事讲述了性情古怪孤僻的小女孩玛丽・伦罗克斯的父母双亡后，生活在姨父神秘阴沉的大房子里，一次神奇的经历，使玛丽闯入久已禁闭且荒芜的花园。玛丽、农家小子迪肯和常年被关在阴暗房间里病态的少爷柯林，找到了开启快乐的钥匙，和花园经历了一次诗意的复活。",28);

insert into novels(title,picture,author,description,chapter) values
("宫墙柳","宫墙柳.jpg","梦娃",'十四岁那年五月，槐花正香的时节，我撑着脑袋坐在永安宫里打瞌睡，那个男人笑声里带着说不出温柔，他说：“就这么困吗？”那一年我也才十四岁，青春少好的年纪，第一次遇见这样一个人，替我挽发描眉，为我吟诗唱曲，一口一句娇娇儿。我真的一点点心动都没有吗？皇上日日与我写“郎骑竹马来，绕床弄青梅。同居长干里，两小无嫌猜。”可与他青梅竹马两小无猜的又不是我，他那首诗怎么可能是写给我的呢？',20);

$$
DELIMITER ;
