CREATE DATABASE ww;

USE ww;

CREATE TABLE users (
  userID INT PRIMARY KEY NOT NULL,
  userName VARCHAR(20) NOT NULL,
  userPassword VARCHAR(61) NOT NULL,
  userSex CHAR(1) NOT NULL,
  urDate DATE NOT NULL,
  userPhone VARCHAR(11) NOT NULL,
  userState VARCHAR(10) NOT NULL,
  userLevel INT NOT NULL,
  userBDate DATE NOT NULL
);

CREATE TABLE friends(
 UserID INT NOT NULL,
 FriendID INT NOT NULL,
 STATE BOOL NOT NULL,
 FOREIGN KEY (UserID) REFERENCES users(UserID),
 FOREIGN KEY (UserID) REFERENCES users(UserID),
 PRIMARY KEY (UserID,FriendID)
);

CREATE TABLE topics (
  TopicID INT PRIMARY KEY,
  UserID INT NOT NULL,
  TopicCommentNum INT NOT NULL,
  TopicLaunchTime DATETIME NOT NULL,
  TopicContent VARCHAR(200) NOT NULL,
  LikeNum INT NOT NULL,
  FOREIGN KEY (UserID) REFERENCES users(UserID)
);

CREATE TABLE topic_replies (
  TopicID INT NOT NULL,
  CommentUserID INT NOT NULL,
  CommentContent VARCHAR(50) NOT NULL,
  CommentID INT NOT NULL,
  CommentTime DATETIME NOT NULL,
  PRIMARY KEY (TopicID, CommentID),
  FOREIGN KEY (TopicID) REFERENCES topics(TopicID) ON DELETE CASCADE,
  FOREIGN KEY (CommentUserID) REFERENCES users(UserID)
);

CREATE TABLE likes(
 TopicID INT NOT NULL,
 LikeUserID INT NOT NULL,
 PRIMARY KEY (TopicID, LikeUserID),
 FOREIGN KEY (TopicID) REFERENCES topics(TopicID) ON DELETE CASCADE,
 FOREIGN KEY (LikeUserID) REFERENCES users(UserID)
);

CREATE TABLE crowds (
  GroupID INT NOT NULL,
  MasterID INT NOT NULL,
  ManagerID INT NOT NULL,
  GroupName VARCHAR(10) NOT NULL,
  CreateDate DATE NOT NULL,
  GroupNum INT NOT NULL,
  GroupBackground VARCHAR(50),
  PRIMARY KEY (GroupID)
);

CREATE TABLE crowds_members(
 GroupID INT NOT NULL,
 MemberID INT NOT NULL,
 STATE BOOL NOT NULL,
 PRIMARY KEY (GroupID, MemberID),
 FOREIGN KEY (GroupID) REFERENCES crowds(GroupID) ON DELETE CASCADE,
 FOREIGN KEY (MemberID) REFERENCES users(userID)
);

CREATE TABLE crowds_messages (
  GroupID INT NOT NULL,
  GroupMessageID INT NOT NULL,
  ConversationContent VARCHAR(50) NOT NULL,
  UserID INT NOT NULL,
  SendTime DATETIME NOT NULL,
  PRIMARY KEY (GroupID, GroupMessageID),
  FOREIGN KEY (GroupID) REFERENCES crowds(GroupID) ON DELETE CASCADE,
  FOREIGN KEY (UserID) REFERENCES users(UserID)
);

CREATE TABLE private_messages (
  UserID INT NOT NULL,
  ReceiverID INT NOT NULL,
  MessageContent VARCHAR(50) NOT NULL,
  MessageContentID INT NOT NULL,
  SendTime DATETIME NOT NULL,
  ReceiveState BOOL NOT NULL,
  PRIMARY KEY (UserID, ReceiverID, MessageContentID),
  FOREIGN KEY (UserID) REFERENCES users(UserID),
  FOREIGN KEY (ReceiverID) REFERENCES users(UserID)
);

CREATE TABLE supervisors (
  SupervisorID INT NOT NULL,
  GrantTime DATE NOT NULL,
  PRIMARY KEY (SupervisorID),
  FOREIGN KEY (SupervisorID) REFERENCES users(UserID)
);

CREATE TABLE notifications (
  NotificationID INT NOT NULL,
  NotificationContent VARCHAR(100) NOT NULL,
  NotificationTime DATETIME NOT NULL,
  SupervisorID INT NOT NULL,
  PRIMARY KEY (NotificationID),
  FOREIGN KEY (SupervisorID) REFERENCES supervisors(SupervisorID)
);


CREATE TABLE audit_logs (
  LogID INT PRIMARY KEY AUTO_INCREMENT,
  Table_Name VARCHAR(50) NOT NULL,
  Action VARCHAR(10) NOT NULL,
  Action_Time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



DELIMITER $$
CREATE TRIGGER users_trigger
AFTER INSERT ON users
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('users', 'insert', NOW());
END$$

CREATE TRIGGER friends_trigger
AFTER INSERT ON friends
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('friends', 'insert', NOW());
END$$

CREATE TRIGGER topics_trigger
AFTER INSERT ON topics
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('topics', 'insert', NOW());
END;$$


CREATE TRIGGER topic_replies_trigger
AFTER INSERT ON topic_replies
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('topic_replies', 'insert', NOW());
    UPDATE topics SET TopicCommentNum = TopicCommentNum + 1 WHERE TopicID = NEW.TopicID;
END;$$

CREATE TRIGGER crowds_trigger
AFTER INSERT ON crowds
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('crowds', 'insert', NOW());
END;$$

CREATE TRIGGER update_out_group_num
AFTER DELETE ON crowds_members
FOR EACH ROW
BEGIN
    UPDATE crowds
    SET GroupNum = GroupNum - 1
    WHERE GroupID = OLD.GroupID;
END;$$

CREATE TRIGGER crowds_messages_trigger
AFTER INSERT ON crowds_messages
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('crowds_messages', 'insert', NOW());
END;$$

CREATE TRIGGER private_messages_trigger
AFTER INSERT ON private_messages
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('private_messages', 'insert', NOW());
END;$$

CREATE TRIGGER supervisors_trigger
AFTER INSERT ON supervisors
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('supervisors', 'insert', NOW());
END;$$

CREATE TRIGGER notifications_trigger
AFTER INSERT ON notifications
FOR EACH ROW
BEGIN
    INSERT INTO audit_logs (Table_Name, Action, Action_Time) VALUES ('notifications', 'insert', NOW());
END;$$




DELIMITER ;

CREATE TABLE SPRING_SESSION (
  PRIMARY_ID CHAR(36) NOT NULL,
  SESSION_ID CHAR(36) NOT NULL,
  CREATION_TIME BIGINT NOT NULL,
  LAST_ACCESS_TIME BIGINT NOT NULL,
  MAX_INACTIVE_INTERVAL INT NOT NULL,
  EXPIRY_TIME BIGINT NOT NULL,
  PRINCIPAL_NAME VARCHAR(100),
  CONSTRAINT SPRING_SESSION_PK PRIMARY KEY (PRIMARY_ID)
) ENGINE=INNODB ROW_FORMAT=DYNAMIC;

CREATE UNIQUE INDEX SPRING_SESSION_IX1 ON SPRING_SESSION (SESSION_ID);
CREATE INDEX SPRING_SESSION_IX2 ON SPRING_SESSION (EXPIRY_TIME);
CREATE INDEX SPRING_SESSION_IX3 ON SPRING_SESSION (PRINCIPAL_NAME);

CREATE TABLE SPRING_SESSION_ATTRIBUTES (
  SESSION_PRIMARY_ID CHAR(36) NOT NULL,
  ATTRIBUTE_NAME VARCHAR(200) NOT NULL,
  ATTRIBUTE_BYTES BLOB NOT NULL,
  CONSTRAINT SPRING_SESSION_ATTRIBUTES_PK PRIMARY KEY (SESSION_PRIMARY_ID, ATTRIBUTE_NAME),
  CONSTRAINT SPRING_SESSION_ATTRIBUTES_FK FOREIGN KEY (SESSION_PRIMARY_ID) REFERENCES SPRING_SESSION (PRIMARY_ID) ON DELETE CASCADE
) ENGINE=INNODB ROW_FORMAT=DYNAMIC;


insert into users values(0,"fun",123456,'m',CURDATE(),18114803454,'offline',0,CURDATE());
insert into supervisors values(0,CURDATE());
insert into notifications values (0,"今天我最帅",CURDATE(),0);
insert into topics values(0,0,0,curdate(),"欢迎来到低语世界",0);
